Full Credit
===========

Number of cores available to my test environment (in bash use ``nproc`` command): 4
Primes range for my machine (between 20 and 30 second runtime without threads): 3,000,000

Without threads:

real    0m40.373s
user    0m33.107s
sys     0m5.587s


With 2 threads:

real    0m35.491s
user    0m36.170s
sys     0m5.772s


With 3 threads:

real    0m32.217s
user    0m37.838s
sys     0m5.612s


With 4 threads:

real    0m29.407s
user    0m42.500s
sys     0m5.331s


With 5 threads:

real    0m33.109s
user    0m47.359s
sys     0m5.819s


With 6 threads:

real    0m32.615s
user    0m48.873s
sys     0m5.706s


With 7 threads:

real    0m28.041s
user    0m43.020s
sys     0m5.531s


With 8 threads:

real    0m28.742s
user    0m45.431s
sys     0m5.426s


With 16 threads:

real    0m28.342s
user    0m46.892s
sys     0m5.589s


With 32 threads:

real    0m30.765s
user    0m45.870s
sys     0m5.753s


With 64 threads:

real    0m32.091s
user    0m48.203s
sys     0m6.112s


QUESTION: After threading is added to threads.cpp, is the order of prime numbers found in primes_threads.txt the same or different than in primes.txt?  Why?
ANSEWR: there isn't an easy way to clearly see it in the current program, but I think it will be different each time (as long as there is more than one thread)
because each thread will work simultaneously and so numbers from each threads range will be added at different orders everytime
if the order of primes was critical to the progrma, this could be fixed by a simple Collections.sort before returning which will sort the primes
in order


QUESTION: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?
ANSWER: I remember from lecture that the program will likely speed up untill the number of threads matches the number of cores. My numbers seem to support this.
The real times seem to speed up to 4 threads (which is how many cores I have). After that it fluctuates between 28 and 32. My guess is that once it reaches the number of cores
all the extra threads must wait for a core to become available. In addition to that, Some of the variation should be attributed to the other programs I had running alongside this.
Among those other programs are: A browser, a music streaming app, and a messaging app. These other applications will also need to use the cpu.  


QUESTION: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?
ANSEWR: It seems relatively constant across all runs. I believe that the "sys" label reffers to the time spent in bash/ terminal. If that is the case, 
then it would make sense as all the runs had to print the exact same text. In addition, all the printing is done from the main function which is not multithreaded.
The only part that is multithreaded is checking whether each number in the range is a prime. The slight difference is likely due to the other applications mentioned above.


Bonus (Not attempted)
=====

After "load balancing" your code as discussed in the PDF, rerun the test with the same number of threads as your test environment has cores. For example, on a 4-core machine, run your code with 4 threads and record the time below.

Number of cores: 

Load Balanced
-------------

real	
user	
sys	

NOT Load Balanced
-----------------

Copy the time for this number of cores from the Full Credit section:

real	
user	
sys	

QUESTION: What difference does a load balanced thread pool make in execution time?




Extreme Bonus (Not attempted)
=============

List the optimizations you applied to reduce the time needed to identify prime numbers.

* Optimization 1: 
* Optimization 2: 
* Optimization 3: 

Add additional bullet points as needed.